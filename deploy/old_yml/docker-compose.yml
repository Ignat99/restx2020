version: '3.4'
services:
    database:
        image: mysql:5.7.21
        ports:
            - 3306:3306
        environment:
            - MYSQL_ROOT_PASSWORD=test
            - MYSQL_USER=test
            - MYSQL_PASSWORD=test
            - MYSQL_DATABASE=insikt
        volumes:
#            - data02:/var/lib/mysql
            - /home/ubuntu/opt/docker-volumes/mysql:/var/lib/mysql
        networks:
          default:
            ipv4_address: 172.18.0.4

#    rabbitmq:
#        image: rabbitmq:3.6.12-management
#        hostname: rabbitmq
#        volumes:
#            - /home/ubuntu/opt/docker-volumes/rabbitmq:/var/lib/rabbitmq
#        environment:
#            - RABBITMQ_DEFAULT_PASS=admin1234
#            - RABBITMQ_DEFAULT_USER=admin
#            - RABBITMQ_DEFAULT_VHOST=/
#        ports:
#            - 5672:5672
#            - 15672:15672
#        networks:
#          default:
#            ipv4_address: 172.18.0.3

    elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:5.6.15
        volumes:
            - data01:/usr/share/elasticsearch/data
            - ./config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
#            - /home/ubuntu/opt/docker-volumes/es_volume:/usr/share/elasticsearch/data
        ports:
            - 9200:9200
            - 9300:9300
        environment:
#            discovery.type: "single-node"
            ES_JAVA_OPTS: "-Xmx2g -Xms2g"
        networks:
          default:
            ipv4_address: 172.18.0.2

    kibana:
        image: docker.elastic.co/kibana/kibana:5.6.15
        volumes:
            - ./config/kibana.yml:/usr/share/kibana/config/kibana.yml
        environment:
            - ELASTICSEARCH_URL=http://elasticsearch:9200
#            - ELASTICSEARCH_URL=http://172.18.0.2:9200
        restart: always
        ports:
            - 5601:5601
        depends_on:
            - elasticsearch
        networks:
          default:
            ipv4_address: 172.18.0.7

    logstash:
        image: docker.elastic.co/logstash/logstash:5.6.15
        volumes:
            - /home/ubuntu/tmp/deploy/insikt-swarm/config/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
#        configs:
#            - source: logstashconfig
#              target: /usr/share/logstash/pipeline/logstash.conf
#      - source: logstashyml
#        target: /usr/share/logstash/config/logstash.yml
        environment:
            XPACK_MONITORING_ENABLED: "false"
#      - ELASTICSEARCH_URL=http://elasticsearch:9200
        restart: always
        ports:
            - 5000:5000
        deploy:
#            mode: replicated
#            replicas: 1
#      placement:
#        constraints:
#          - engine.labels.node.type == api
        networks:
#      insikt_overlay:
          default:
            ipv4_address: 172.18.0.41
#        aliases:
#          - logstash.service
#    depends_on:
#      - elasticsearch
#      - kibana


#    postgresql:
#        image: 396648463862.dkr.ecr.eu-west-1.amazonaws.com/ruby-frontend-db:2175bc2cc013163f3fe8b327113b61de53fc633a
#        environment:
#            - POSTGRES_USER=postgres
#            - POSTGRES_PASSWORD=demo
#            - POSTGRES_DB=inviso
##        volumes:
##            - ./postgres-data:/var/lib/postgresql/data
#        ports:
#            - 5431:5431
#        networks:
#          default:
#            ipv4_address: 172.18.0.6

##    volumes:
##      postgres-data:


    backend:
        image: backend:latest
        environment:
            - SQL_HOST=172.18.0.4
            - DB_URL=jdbc:mysql://172.18.0.4:3306/insikt
            - DB_USER=test
            - DB_PASS=test
            - DB_PORT=3306
            - ENV
            - FRONTEND_HOST=localhost
            - FRONTEND_PORT=8080
            - TWITTER2RABBIT_HOST=localhost
            - TWITTER2RABBIT_PORT=8080
            - ELASTIC_HOST=172.18.0.2
            - ELASTIC_PORT=9300
            - ELASTIC_INDEX=demo
            - ELASTIC_INDEX_TYPE=tweet
            - EMAIL_USERNAME=ignat99@gmail.com
            - EMAIL_PASSWORD=test
            - EMAIL_HOST=smtp.gmail.com
            - EMAIL_PORT=587
        restart: always
        ports:
            - 8084:8084
        depends_on:
            - database
            - elasticsearch
        networks:
          default:
            ipv4_address: 172.18.0.8

    frontend:
        image: frontend:latest
        secrets:
            - source: cert
              target: /root/ssl/inviso.cert
            - source: privateKey
              target: /root/ssl/cert.key
        volumes:
            - /home/ubuntu/opt/docker-volumes/frontend/root/ssl:/root/ssl
            - ./config/frontend/nginx.conf:/etc/nginx/conf.d/default.conf
            - ./config/frontend/.htpasswd:/etc/nginx/conf.d/.htpasswd
        ports:
            - 443:443
            - 80:80
        restart: always
#        depends_on:
#            - backend
        networks:
          default:
            ipv4_address: 172.18.0.11

#    twitter:
#        image: 396648463862.dkr.ecr.eu-west-1.amazonaws.com/twitter_streaming:6d732aac5679492c802cb93d201b2e5ffdf77b9f
#        environment:
#            - PORT=3003
#            - TIMEOUT=60
#            - GET_KEYWORDS_FROM_FRONTEND=true
#            - FRONTEND_HOST=backend
#            - FRONTEND_PORT=8084
#            - FRONTEND_PATH=/api/keywords
#            - RABBIT_HOST=rabbitmq
#            - RABBIT_PORT=5672
#            - RABBIT_USER=admin
#            - RABBIT_PASS=test
#        volumes:
#            - ./twitter/keys.js:/var/app/keys.js
#        depends_on:
#            - rabbitmq
#            - backend
#        networks:
#          default:
#            ipv4_address: 172.18.0.10

    twitterapi:
#        image: 396648463862.dkr.ecr.eu-west-1.amazonaws.com/insikt-backend-twitterapi:latests
        image: twitterapi:latest
        ports:
            - 8032:8032
            - 8035:8035
        volumes:
            - ./twitter/keys.js:/var/app/keys.js
            - ./twitter/ca.pem:/var/app/ca.pem
            - ./twitter/ca.key:/var/app/ca.key
            - ./twitter/paula.pem:/var/app/paula.pem
            - ./twitter/paula.full.pem:/var/app/paula.full.pem
#        depends_on:
#            - backend
        networks:
#          host:
          default:
            ipv4_address: 172.18.0.15

    instaapi:
        image: instaapi:latest
        ports:
            - 8039:8039
            - 8036:8036
#    deploy:
#      mode: replicated
#      replicas: 1
        networks:
          default:
            ipv4_address: 172.18.0.45

#      webnet:
#        aliases:
#          - instaapi.service
#          host:

    pyalert:
        image: pyalerts:latest
        environment:
            - SQL_HOST=database
            - DB_URL=jdbc:mysql://database:3306/insikt
            - DB_USER=test
            - DB_PASS=test
            - DB_PORT=3306
            - DB_NAME=insikt
        ports:
            - 8087:8087
#        depends_on:
#            - backend
        networks:
          default:
            ipv4_address: 172.18.0.12

    storm:
        image: storm:latest
#        volumes:
#            - /home/ubuntu/deploy/storm/suite:/suite
#            - /home/ubuntu/deploy/storm/cluster.xml:/home/ubuntu/apache-storm-1.2.2/log4j2/cluster.xml
#            - /home/ubuntu/deploy/storm/worker.xml:/home/ubuntu/apache-storm-1.2.2/log4j2/worker.xml
#        environment:
#            - ELASTIC_HOST=elasticsearch
#            - ELASTIC_CLUSTER=docker-cluster
#            - ELASTIC_INDEX=demo
#            - ELASTIC_TYPE=tweet
#            - RABBIT_HOST=rabbitmq
#            - RABBIT_PORT=5672
#            - RABBIT_USER=admin
#            - RABBIT_PASS=admin1234
#            - RABBIT_VHOST=/
#            - RABBIT_EXCHANGE=
#            - POSTGRES_HOST=postgresql
#            - POSTGRES_PORT=5432
#            - POSTGRES_DBNAME=inviso
#            - POSTGRES_USER=postgres
#            - POSTGRES_PASS=demo
#            - ELASTIC_FREEBASE_CLUSTER_NAME=docker-cluster
#            - ELASTIC_FREEBASE_HOST=ip-172-31-16-73.ec2.internal
#            - ELASTIC_FREEBASE_PORT=9300
#            - ELASTIC_FREEBASE_TIMEOUT=30
#            - ELASTIC_FREEBASE_INDEX=freebase_entities
#            - ELASTIC_FREEBASE_TYPE=entity
        restart: always
#        depends_on:
#            - elasticsearch
#            - rabbitmq
#            - twitter
#            - postgresql
#        command: "bash start.sh"
        networks:
          default:
            ipv4_address: 172.18.0.25


#    st0rm:
#        image: 396648463862.dkr.ecr.eu-west-1.amazonaws.com/insikt-storm:berta
#        volumes:
#            - /home/ubuntu/deploy/storm/suite:/suite
#            - /home/ubuntu/deploy/storm/cluster.xml:/home/ubuntu/apache-storm-1.2.2/log4j2/cluster.xml
#            - /home/ubuntu/deploy/storm/worker.xml:/home/ubuntu/apache-storm-1.2.2/log4j2/worker.xml
#        environment:
#            - ELASTIC_HOST=elasticsearch
#            - ELASTIC_CLUSTER=docker-cluster
#            - ELASTIC_INDEX=demo
#            - ELASTIC_TYPE=tweet
#            - RABBIT_HOST=rabbitmq
#            - RABBIT_PORT=5672
#            - RABBIT_USER=admin
#            - RABBIT_PASS=admin1234
#            - RABBIT_VHOST=/
#            - RABBIT_EXCHANGE=
#            - POSTGRES_HOST=postgresql
#            - POSTGRES_PORT=5432
#            - POSTGRES_DBNAME=inviso
#            - POSTGRES_USER=postgres
#            - POSTGRES_PASS=demo
#        depends_on:
#            - elasticsearch
##            - rabbitmq
##            - twitter
#            - postgresql
##        command: "bash init.sh"
#        networks:
#          default:
#            ipv4_address: 172.18.0.25

    zookeeper:
        image: confluentinc/cp-zookeeper:5.2.1
        hostname: zookeeper
        container_name: zookeeper
        ports:
          - "2181:2181"
        environment:
          ZOOKEEPER_CLIENT_PORT: 2181
          ZOOKEEPER_TICK_TIME: 2000
        networks:
          default:
            ipv4_address: 172.18.0.22


    broker:
      image: confluentinc/cp-enterprise-kafka:5.2.1
      hostname: broker
      container_name: broker
      depends_on:
        - zookeeper
      ports:
        - "29092:29092"
        - "9092:9092"
      environment:
        KAFKA_BROKER_ID: 1
        KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
#        KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
        KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://broker:9092
        KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
        CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
        CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
        CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
        CONFLUENT_METRICS_ENABLE: 'true'
        CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
      networks:
        default:
          ipv4_address: 172.18.0.9


    schema-registry:
      image: confluentinc/cp-schema-registry:5.2.1
      hostname: schema-registry
      container_name: schema-registry
      depends_on:
        - zookeeper
        - broker
      ports:
        - "8081:8081"
      environment:
        SCHEMA_REGISTRY_HOST_NAME: schema-registry
        SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'
      networks:
        default:
          ipv4_address: 172.18.0.31

    connect:
      image: confluentinc/kafka-connect-datagen:latest
      build:
        context: .
        dockerfile: Dockerfile
      hostname: connect
      container_name: connect
      depends_on:
        - zookeeper
        - broker
        - schema-registry
      ports:
        - "8083:8083"
      environment:
        CONNECT_BOOTSTRAP_SERVERS: 'broker:29092'
        CONNECT_REST_ADVERTISED_HOST_NAME: connect
        CONNECT_REST_PORT: 8083
        CONNECT_GROUP_ID: compose-connect-group
        CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
        CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
        CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
        CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
        CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
        CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
        CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
        CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
        CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
        CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
        CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
        CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
        CONNECT_ZOOKEEPER_CONNECT: 'zookeeper:2181'
        # Assumes image is based on confluentinc/kafka-connect-datagen:latest which is pulling 5.1.1 Connect image
        CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-5.2.1.jar
        CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
        CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
        CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
        CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
      command: "bash -c 'if [ ! -d /usr/share/confluent-hub-components/confluentinc-kafka-connect-datagen ]; then echo \"WARNING: Did not find   directory for kafka-connect-datagen (did you remember to run: docker-compose up -d --build ?)\"; fi ; /etc/confluent/docker/run'"
      networks:
        default:
          ipv4_address: 172.18.0.32

    control-center:
      image: confluentinc/cp-enterprise-control-center:5.2.1
      hostname: control-center
      container_name: control-center
      depends_on:
        - zookeeper
        - broker
        - schema-registry
        - connect
        - ksql-server
      ports:
        - "9021:9021"
      environment:
        CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
        CONTROL_CENTER_ZOOKEEPER_CONNECT: 'zookeeper:2181'
        CONTROL_CENTER_CONNECT_CLUSTER: 'connect:8083'
        CONTROL_CENTER_KSQL_URL: "http://ksql-server:8088"
        CONTROL_CENTER_KSQL_ADVERTISED_URL: "http://localhost:8088"
        CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
        CONTROL_CENTER_REPLICATION_FACTOR: 1
        CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
        CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
        CONFLUENT_METRICS_TOPIC_REPLICATION: 1
        PORT: 9021
      networks:
        default:
          ipv4_address: 172.18.0.33

    ksql-server:
      image: confluentinc/cp-ksql-server:5.2.1
      hostname: ksql-server
      container_name: ksql-server
      depends_on:
        - broker
        - connect
      ports:
        - "8088:8088"
      environment:
        KSQL_CONFIG_DIR: "/etc/ksql"
        KSQL_LOG4J_OPTS: "-Dlog4j.configuration=file:/etc/ksql/log4j-rolling.properties"
        KSQL_BOOTSTRAP_SERVERS: "broker:29092"
        KSQL_HOST_NAME: ksql-server
        KSQL_APPLICATION_ID: "cp-all-in-one"
        KSQL_LISTENERS: "http://0.0.0.0:8088"
        KSQL_CACHE_MAX_BYTES_BUFFERING: 0
        KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
        KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
        KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      networks:
        default:
          ipv4_address: 172.18.0.34

    ksql-cli:
      image: confluentinc/cp-ksql-cli:5.2.1
      container_name: ksql-cli
      depends_on:
        - broker
        - connect
        - ksql-server
      entrypoint: /bin/sh
      tty: true
      networks:
        default:
          ipv4_address: 172.18.0.35

    ksql-datagen:
      # Downrev ksql-examples to 5.1.2 due to DEVX-798 (work around issues in 5.2.0)
      image: confluentinc/ksql-examples:5.1.2
      hostname: ksql-datagen
      container_name: ksql-datagen
      depends_on:
        - ksql-server
        - broker
        - schema-registry
        - connect
      command: "bash -c 'echo Waiting for Kafka to be ready... && \
                         cub kafka-ready -b broker:29092 1 40 && \
                         echo Waiting for Confluent Schema Registry to be ready... && \
                         cub sr-ready schema-registry 8081 40 && \
                         echo Waiting a few seconds for topic creation to finish... && \
                         sleep 11 && \
                         tail -f /dev/null'"
      environment:
        KSQL_CONFIG_DIR: "/etc/ksql"
        KSQL_LOG4J_OPTS: "-Dlog4j.configuration=file:/etc/ksql/log4j-rolling.properties"
        STREAMS_BOOTSTRAP_SERVERS: broker:29092
        STREAMS_SCHEMA_REGISTRY_HOST: schema-registry
        STREAMS_SCHEMA_REGISTRY_PORT: 8081
      networks:
        default:
          ipv4_address: 172.18.0.36

    rest-proxy:
      image: confluentinc/cp-kafka-rest:5.2.1
      depends_on:
        - zookeeper
        - broker
        - schema-registry
      ports:
        - 8082:8082
      hostname: rest-proxy
      container_name: rest-proxy
      environment:
        KAFKA_REST_HOST_NAME: rest-proxy
        KAFKA_REST_BOOTSTRAP_SERVERS: 'broker:29092'
        KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
        KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      networks:
        default:
          ipv4_address: 172.18.0.37

secrets:
    cert:
        file: ./frontend/inviso.cert
    privateKey:
        file: ./frontend/cert.key

volumes:
    data01:
        driver: local
    data02:
        driver: local

#configs:
#    logstashconfig:
#        file: /home/ubuntu/tmp/deploy/insikt-swarm/config/logstash/logstash.conf

##  logstashyml:
##    file: /home/ubuntu/tmp/insikt-deploy-entrega/insikt-swarm/config/logstash/logstash.yml


networks:
    default:
#      external:
#        name: host
      ipam:
        driver: default
        config:
          - subnet: "172.18.0.0/16"
#            ip_range: 172.18.0.0/24
#            gateway: 172.18.0.1


#    alertapiv09:
#        image: alertapiv09
#        environment:
#            - SQL_HOST=database
#            - DB_URL=jdbc:mysql://database:3306/insikt
#            - DB_USER=test
#            - DB_PASS=test
#            - DB_PORT=3306
#            - DB_NAME=insikt
#        ports:
#            - 8085:8085
#        depends_on:
#            - backend
#        command: "bash start_test.sh"
